// Code generated by hertz generator.

package user

import (
	"chat/common/errorx"
	"chat/common/resp_util"
	"context"

	user "chat/biz/model/user"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Login .
// @router /login [GET]
func Login(ctx context.Context, c *app.RequestContext) {
	var (
		err  error
		req  = user.NewLoginRequest()
		resp = user.NewLoginResponse()
	)

	if err = c.BindAndValidate(req); err != nil {
		resp.BaseResp = resp_util.GenBaseResp(errorx.NewWithCode(consts.StatusBadRequest, "参数错误"))
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp, err = LoginHandler(ctx, req)
	resp.BaseResp = resp_util.GenBaseResp(err)
	c.JSON(consts.StatusOK, resp)
}

// Register .
// @router /register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var (
		err  error
		req  = user.NewRegisterRequest()
		resp = user.NewRegisterResponse()
	)
	if err = c.BindAndValidate(req); err != nil {
		resp.BaseResp = resp_util.GenBaseResp(errorx.NewWithCode(consts.StatusBadRequest, "参数错误"))
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp, err = RegisterHandler(ctx, req)
	resp.BaseResp = resp_util.GenBaseResp(err)
	c.JSON(consts.StatusOK, resp)
}

// GetUserInfo .
// @router /user/get [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var (
		err  error
		req  = user.NewGetUserInfoRequest()
		resp = user.NewGetUserInfoResponse()
	)

	if err = c.BindAndValidate(req); err != nil {
		resp.BaseResp = resp_util.GenBaseResp(errorx.NewWithCode(consts.StatusBadRequest, "参数错误"))
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp, err = GetUserInfoHandler(ctx, req)
	resp.BaseResp = resp_util.GenBaseResp(err)
	c.JSON(consts.StatusOK, resp)
}
